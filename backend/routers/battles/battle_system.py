# --- Conceptual Python Backend using FastAPI ---
# NOTE: This code requires FastAPI and Uvicorn (`pip install fastapi uvicorn python-multipart fastapi-cors`)
# and needs to be run locally using `uvicorn main:app --reload` (assuming the file is named main.py).
# It cannot run directly in this environment.

import random
from fastapi import FastAPI, HTTPException, Body
from fastapi import APIRouter, Depends, HTTPException, Request
from fastapi.templating import Jinja2Templates

from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel # –î–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
from typing import Optional, Dict, Any, List
from sqlalchemy.orm import Session
from ... import models

# --- Game Constants ---
GRID_WIDTH = 10
GRID_HEIGHT = 8
DEPLOYMENT_COLUMNS = 3
AI_PLAYER_NUMBER = 2

# --- Creature Types Data ---
creature_types_data = {
    'knight': {'name': 'knight', 'emoji': '‚ôò', 'maxHp': 20, 'attack': 5, 'movement': 3, 'range': 1},
    'archer': {'name': 'archer', 'emoji': 'üèπ', 'maxHp': 12, 'attack': 4, 'movement': 2, 'range': 4},
    'skeleton': {'name': 'skeleton', 'emoji': 'üíÄ', 'maxHp': 15, 'attack': 3, 'movement': 2, 'range': 1},
    'goblin': {'name': 'goblin', 'emoji': 'üë∫', 'maxHp': 10, 'attack': 2, 'movement': 4, 'range': 1},
}

initial_army_data = { 'knight': 1, 'archer': 1, 'goblin': 1 }

# --- Helper Functions ---
def generate_id():
    return ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=7))

def calculate_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# --- Game Classes (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∂) ---
class Creature:
    def __init__(self, type_name, player, x, y):
        type_data = creature_types_data.get(type_name)
        if not type_data:
            raise ValueError(f"Unknown creature type: {type_name}")
        self.id = generate_id()
        self.type = type_data
        self.player = player
        self.x = x
        self.y = y
        self.hp = type_data['maxHp']
        self.can_move = False
        self.can_attack = False
        self.retaliated_this_turn = False

    def to_dict(self):
        return {
            'id': self.id,
            'type_name': self.type['name'],
            'emoji': self.type['emoji'],
            'player': self.player,
            'x': self.x,
            'y': self.y,
            'hp': self.hp,
            'maxHp': self.type['maxHp'],
            'canMove': self.can_move,
            'canAttack': self.can_attack,
        }

class BattleSystem:
    def __init__(self, user: models.User, db: Optional[Session] = None):
        self.user = user
        self.db = db
        # self.enemies: list[models.Enemy] = []
        self.game_state = 'mode_selection'
        self.game_mode = 'pve'
        self.current_player = 1
        self.deployment_player = 1
        self.creatures = {} # {id: Creature_object}
        self.player1_deployment_pool = {}
        self.player2_deployment_pool = {}
        self.message = "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –≥—Ä–∏"
        print("Game instance created.") # –õ–æ–≥ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏

    def start_game(self, mode):
        print(f"Starting game in mode: {mode}")
        self.game_mode = mode
        self.game_state = 'deployment'
        self.current_player = 1
        self.deployment_player = 1
        self.creatures = {}
        self.player1_deployment_pool = initial_army_data.copy()
        self.player2_deployment_pool = initial_army_data.copy()
        self.message = f"–†–æ–∑—Å—Ç–∞–Ω–æ–≤–∫–∞: –ì—Ä–∞–≤–µ—Ü—å 1"
        return self.get_state()

    def get_creature_at(self, x, y):
        for creature in self.creatures.values():
            if creature.x == x and creature.y == y:
                return creature
        return None

    def is_in_deployment_zone(self, x, y, player):
        start_col = 0 if player == 1 else GRID_WIDTH - DEPLOYMENT_COLUMNS
        end_col = start_col + DEPLOYMENT_COLUMNS
        return start_col <= x < end_col and 0 <= y < GRID_HEIGHT

    def place_creature(self, player, type_name, x, y):
        if self.game_state != 'deployment' or player != self.deployment_player:
            self.message = "–ó–∞—Ä–∞–∑ –Ω–µ –≤–∞—à–∞ —á–µ—Ä–≥–∞ —Ä–æ–∑—Å—Ç–∞–≤–ª—è—Ç–∏!"
            return False, self.message

        pool = self.player1_deployment_pool if player == 1 else self.player2_deployment_pool

        if not self.is_in_deployment_zone(x, y, player):
            self.message = "–ù–µ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ —Ç—É—Ç!"
            return False, self.message
        if self.get_creature_at(x, y):
            self.message = "–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞!"
            return False, self.message
        if pool.get(type_name, 0) <= 0:
            self.message = f"–ù–µ–º–∞—î –±—ñ–ª—å—à–µ {type_name} –¥–ª—è —Ä–æ–∑—Å—Ç–∞–Ω–æ–≤–∫–∏."
            return False, self.message

        try:
            new_creature = Creature(type_name, player, x, y)
            self.creatures[new_creature.id] = new_creature
            pool[type_name] -= 1
            self.message = f"–ì—Ä–∞–≤–µ—Ü—å {player} —Ä–æ–∑–º—ñ—Å—Ç–∏–≤ {type_name}."
            print(f"Placed {type_name} for P{player} at ({x},{y}). Pool: {pool}")

            if all(count == 0 for count in pool.values()):
                self.advance_deployment()

            return True, self.message
        except ValueError as e:
            self.message = str(e)
            return False, self.message

    def advance_deployment(self):
        print(f"Advancing deployment from player {self.deployment_player}")
        if self.deployment_player == 1:
            if self.game_mode == 'pvp':
                self.deployment_player = 2
                self.message = "–†–æ–∑—Å—Ç–∞–Ω–æ–≤–∫–∞: –ì—Ä–∞–≤–µ—Ü—å 2"
            else: # PvE
                self.deploy_ai_creatures()
                self.start_battle()
        else: # Player 2 (PvP) finished
            self.start_battle()

    def deploy_ai_creatures(self):
        print("AI deploying...")
        player = AI_PLAYER_NUMBER
        pool = self.player2_deployment_pool
        start_col = GRID_WIDTH - DEPLOYMENT_COLUMNS
        end_col = GRID_WIDTH
        available_cells = []
        for y in range(GRID_HEIGHT):
            for x in range(start_col, end_col):
                if not self.get_creature_at(x, y):
                    available_cells.append({'x': x, 'y': y})

        for type_name, count in pool.items():
            for _ in range(count):
                if not available_cells:
                    print(f"ERROR: No space left for AI to deploy {type_name}")
                    break
                cell_index = random.randrange(len(available_cells))
                cell = available_cells.pop(cell_index)
                try:
                    new_creature = Creature(type_name, player, cell['x'], cell['y'])
                    self.creatures[new_creature.id] = new_creature
                    print(f"AI placed {type_name} at ({cell['x']},{cell['y']})")
                except ValueError as e:
                    print(f"Error creating AI creature: {e}")
            pool[type_name] = 0

    def start_battle(self):
        print("Starting battle")
        self.game_state = 'battle'
        self.current_player = 1
        self.message = "–ë—ñ–π —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –•—ñ–¥ –ì—Ä–∞–≤—Ü—è 1."
        for creature in self.creatures.values():
            creature.retaliated_this_turn = False
            if creature.player == self.current_player:
                creature.can_move = True
                creature.can_attack = True
            else:
                creature.can_move = False
                creature.can_attack = False

    def move_creature(self, creature_id, target_x, target_y):
        if self.game_state != 'battle': return False, "–ó–∞—Ä–∞–∑ –Ω–µ –±—ñ–π"
        creature = self.creatures.get(creature_id)
        if not creature or creature.player != self.current_player: return False, "–ù–µ –≤–∞—à–µ —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è"
        if not creature.can_move: return False, "–í–∂–µ —Ä—É—Ö–∞–≤—Å—è"

        distance = calculate_distance(creature.x, creature.y, target_x, target_y)
        if distance == 0 or distance > creature.type['movement']: return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å"
        if self.get_creature_at(target_x, target_y): return False, "–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞"

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        old_x, old_y = creature.x, creature.y
        
        creature.x = target_x
        creature.y = target_y
        creature.can_move = False
        self.message = f"{creature.type['emoji']} –ø–µ—Ä–µ–º—ñ—Å—Ç–∏–≤—Å—è –∑ ({old_x}, {old_y}) –Ω–∞ ({target_x}, {target_y})."
        print(f"Creature {creature.type['name']} moved from ({old_x}, {old_y}) to ({target_x}, {target_y})")
        return True, self.message

    def attack_creature(self, attacker_id, defender_id):
        if self.game_state != 'battle': return False, "–ó–∞—Ä–∞–∑ –Ω–µ –±—ñ–π"
        attacker = self.creatures.get(attacker_id)
        defender = self.creatures.get(defender_id)

        if not attacker or attacker.player != self.current_player: return False, "–ù–µ –≤–∞—à–µ —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è –¥–ª—è –∞—Ç–∞–∫–∏"
        if not defender or defender.player == self.current_player: return False, "–ù–µ –º–æ–∂–Ω–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Å–≤–æ—ó—Ö"
        if not attacker.can_attack: return False, "–í–∂–µ –∞—Ç–∞–∫—É–≤–∞–≤"

        distance = calculate_distance(attacker.x, attacker.y, defender.x, defender.y)
        if distance > attacker.type['range']: return False, "–¶—ñ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –¥–∞–ª–µ–∫–æ"

        damage = attacker.type['attack']
        defender.hp -= damage
        attacker.can_attack = False
        if attacker.type['name'] != 'knight': attacker.can_move = False
        self.message = f"{attacker.type['emoji']} –∞—Ç–∞–∫—É–≤–∞–≤ {defender.type['emoji']} –Ω–∞ {damage} —à–∫–æ–¥–∏."
        print(f"Attack: {attacker.id} -> {defender.id}. Defender HP: {defender.hp}")

        defender_defeated = False
        attacker_defeated = False

        if defender.hp > 0 and not defender.retaliated_this_turn:
             retaliation_distance = calculate_distance(defender.x, defender.y, attacker.x, attacker.y)
             if retaliation_distance <= defender.type['range']:
                 retaliation_damage = defender.type['attack']
                 attacker.hp -= retaliation_damage
                 defender.retaliated_this_turn = True
                 self.message += f" {defender.type['emoji']} –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–≤–∞–≤ –Ω–∞ {retaliation_damage} —à–∫–æ–¥–∏."
                 print(f"Retaliation: {defender.id} -> {attacker.id}. Attacker HP: {attacker.hp}")
                 if attacker.hp <= 0:
                     attacker_defeated = True

        if defender.hp <= 0:
            self.message += f" {defender.type['emoji']} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–æ!"
            defender_defeated = True

        if defender_defeated:
             # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
             if defender_id in self.creatures:
                 del self.creatures[defender_id]
                 print(f"Defender {defender_id} defeated and removed.")
             else:
                 print(f"Attempted to remove already removed defender {defender_id}")
        if attacker_defeated:
             self.message += f" {attacker.type['emoji']} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ—é!"
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
             if attacker_id in self.creatures:
                 del self.creatures[attacker_id]
                 print(f"Attacker {attacker_id} defeated by retaliation and removed.")
             else:
                  print(f"Attempted to remove already removed attacker {attacker_id}")


        if self.check_win_condition()[0]:
             return True, self.message

        return True, self.message


    def end_turn(self):
        if self.game_state != 'battle': return False, "–ó–∞—Ä–∞–∑ –Ω–µ –±—ñ–π"
        if self.current_player != 1: return False, "–ù–µ –≤–∞—à–∞ —á–µ—Ä–≥–∞"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏ –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é –≥—Ä–∞–≤—Ü—è
        win_check = self.check_win_condition()
        if win_check[0]: return True, win_check[1]

        print("Ending player turn, switching to AI")
        self.current_player = 2
        self.message = "–•—ñ–¥ –®–Ü."

        # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä—ñ–Ω—å –¥–ª—è –®–Ü
        for creature in self.creatures.values():
            creature.retaliated_this_turn = False
            if creature.player == self.current_player:
                creature.can_move = True
                creature.can_attack = True
            else:
                creature.can_move = False
                creature.can_attack = False

        # –Ø–∫—â–æ —Ü–µ PvE —ñ —Ö—ñ–¥ –®–Ü, –≤–∏–∫–æ–Ω—É—î–º–æ —Ö—ñ–¥ –®–Ü
        if self.game_mode == 'pve':
            print("Executing AI turn")
            self.execute_ai_turn()
            print("AI turn completed")

        return True, self.message

    def execute_ai_turn(self):
        print("AI turn started")
        ai_creatures = [c for c in self.creatures.values() if c.player == AI_PLAYER_NUMBER]
        
        for creature in ai_creatures:
            print(f"Processing AI creature {creature.type['name']} at ({creature.x}, {creature.y})")
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—É –≤–æ—Ä–æ–∂—É —Ü—ñ–ª—å
            enemy_creatures = [c for c in self.creatures.values() if c.player != AI_PLAYER_NUMBER]
            if not enemy_creatures:
                print("No enemy creatures found")
                continue

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—É —Ü—ñ–ª—å
            closest_enemy = min(enemy_creatures, 
                              key=lambda e: calculate_distance(creature.x, creature.y, e.x, e.y))
            print(f"Closest enemy is {closest_enemy.type['name']} at ({closest_enemy.x}, {closest_enemy.y})")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ –∞—Ç–∞–∫—É–≤–∞—Ç–∏
            if creature.can_attack:
                distance = calculate_distance(creature.x, creature.y, closest_enemy.x, closest_enemy.y)
                print(f"Distance to enemy: {distance}, attack range: {creature.type['range']}")
                if distance <= creature.type['range']:
                    # –ê—Ç–∞–∫—É—î–º–æ
                    success, message = self.attack_creature(creature.id, closest_enemy.id)
                    print(f"AI attack: {message}")
                    if success:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
                        win_check = self.check_win_condition()
                        if win_check[0]:
                            return
                    continue

            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –∞—Ç–∞–∫—É–≤–∞—Ç–∏, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –Ω–∞–±–ª–∏–∑–∏—Ç–∏—Å—è
            if creature.can_move:
                print(f"Trying to move {creature.type['name']} closer to enemy")
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ä—É—Ö—É
                best_move = None
                best_distance = float('inf')
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤ —Ä–∞–¥—ñ—É—Å—ñ —Ä—É—Ö—É
                for dx in range(-creature.type['movement'], creature.type['movement'] + 1):
                    for dy in range(-creature.type['movement'], creature.type['movement'] + 1):
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—É–º–∞ —Ä—É—Ö—É –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é
                        if abs(dx) + abs(dy) > creature.type['movement']:
                            continue
                            
                        new_x = creature.x + dx
                        new_y = creature.y + dy
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è —ñ –≤—ñ–ª—å–Ω–∞
                        if (0 <= new_x < GRID_WIDTH and 
                            0 <= new_y < GRID_HEIGHT and 
                            not self.get_creature_at(new_x, new_y)):
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–∫—Ä–∞—â—É—î –Ω–∞—à—É –ø–æ–∑–∏—Ü—ñ—é
                            new_distance = calculate_distance(new_x, new_y, closest_enemy.x, closest_enemy.y)
                            if new_distance < best_distance:
                                best_distance = new_distance
                                best_move = (new_x, new_y)
                                print(f"Found better move: ({new_x}, {new_y}) with distance {new_distance}")
                
                # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ö–æ—Ä–æ—à–∏–π —Ö—ñ–¥, —Ä—É—Ö–∞—î–º–æ—Å—å
                if best_move:
                    print(f"Moving to {best_move}")
                    success, message = self.move_creature(creature.id, best_move[0], best_move[1])
                    print(f"AI move: {message}")
                    
                    # –ü—ñ—Å–ª—è —Ä—É—Ö—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ –∞—Ç–∞–∫—É–≤–∞—Ç–∏
                    if success and creature.can_attack:
                        distance = calculate_distance(creature.x, creature.y, closest_enemy.x, closest_enemy.y)
                        print(f"After move - Distance to enemy: {distance}, attack range: {creature.type['range']}")
                        if distance <= creature.type['range']:
                            success, message = self.attack_creature(creature.id, closest_enemy.id)
                            print(f"AI attack after move: {message}")
                            if success:
                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
                                win_check = self.check_win_condition()
                                if win_check[0]:
                                    return
                else:
                    print(f"No valid move found for {creature.type['name']}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏ –ø—ñ—Å–ª—è —Ö–æ–¥—É –®–Ü
        win_check = self.check_win_condition()
        if not win_check[0]:
            # –Ø–∫—â–æ –≥—Ä–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—é
            self.current_player = 1
            self.message = "–•—ñ–¥ –ì—Ä–∞–≤—Ü—è 1."
            # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä—ñ–Ω—å –¥–ª—è –≥—Ä–∞–≤—Ü—è
            for creature in self.creatures.values():
                creature.retaliated_this_turn = False
                if creature.player == self.current_player:
                    creature.can_move = True
                    creature.can_attack = True
                else:
                    creature.can_move = False
                    creature.can_attack = False

    def check_win_condition(self):
        player1_creatures = any(c.player == 1 and c.hp > 0 for c in self.creatures.values())
        player2_creatures = any(c.player == AI_PLAYER_NUMBER and c.hp > 0 for c in self.creatures.values())

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∑–∞–≥–∞–ª—ñ —î —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è —É –≥—Ä—ñ
        if not player1_creatures and not player2_creatures and self.game_state == 'battle':
             # –ú–æ–∂–ª–∏–≤–æ, –Ω—ñ—á–∏—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞, —è–∫—â–æ –±—ñ–π –ø–æ—á–∞–≤—Å—è –±–µ–∑ —Å—Ç–≤–æ—Ä—ñ–Ω—å
             self.game_state = 'game_over'
             self.message = "–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä—ñ–Ω—å)."
             print("Game Over: No creatures left.")
             return True, self.message

        if not player1_creatures and player2_creatures:
            self.game_state = 'game_over'
            self.message = f"{self.get_player_name(AI_PLAYER_NUMBER)} –ø–µ—Ä–µ–º—ñ–≥!"
            print("Game Over:", self.message)
            return True, self.message
        elif not player2_creatures and player1_creatures:
            self.game_state = 'game_over'
            self.message = f"{self.get_player_name(1)} –ø–µ—Ä–µ–º—ñ–≥!"
            print("Game Over:", self.message)
            return True, self.message
        return False, ""

    def get_player_name(self, player_number):
        if self.game_mode == 'pve' and player_number == AI_PLAYER_NUMBER:
            return "–®–Ü"
        return f"–ì—Ä–∞–≤–µ—Ü—å {player_number}"

    def get_state(self):
        return {
            'gameState': self.game_state,
            'gameMode': self.game_mode,
            'currentPlayer': self.current_player,
            'deploymentPlayer': self.deployment_player,
            'creatures': [c.to_dict() for c in self.creatures.values()],
            'player1DeploymentPool': self.player1_deployment_pool,
            'player2DeploymentPool': self.player2_deployment_pool,
            'message': self.message,
        }

# --- FastAPI App Setup ---
# app = FastAPI()

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")

# # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS
# origins = [
#     "http://localhost", # –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ HTML –ª–æ–∫–∞–ª—å–Ω–æ
#     "http://127.0.0.1",
#     "null", # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —á–µ—Ä–µ–∑ file://)
#     # –î–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ —ñ–Ω—à—ñ –¥–∂–µ—Ä–µ–ª–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
# ]

# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=origins,
#     allow_credentials=True,
#     allow_methods=["*"], # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ (GET, POST, etc.)
#     allow_headers=["*"], # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
# )

# --- –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –≥—Ä–∏ ---
# –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥—Ä–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞

game: BattleSystem = BattleSystem(user = "")

# --- Pydantic Models for Request Validation ---
class StartGameRequest(BaseModel):
    mode: Optional[str] = 'pve'

class DeployRequest(BaseModel):
    player: int
    typeName: str
    x: int
    y: int

class MoveRequest(BaseModel):
    creatureId: str
    targetX: int
    targetY: int

class AttackRequest(BaseModel):
    attackerId: str
    defenderId: str

# --- API Endpoints ---

@router.post("/start")
async def start_new_game(request_data: StartGameRequest):
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç game
    state = game.start_game(request_data.mode)
    return state # FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î dict –≤ JSON

@router.get("/state")
async def get_game_state():
    return game.get_state()

@router.post("/deploy")
async def deploy_creature(request_data: DeployRequest):
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ Pydantic –º–æ–¥–µ–ª—ñ
    success, message = game.place_creature(
        request_data.player,
        request_data.typeName,
        request_data.x,
        request_data.y
    )
    response = game.get_state()
    response['actionSuccess'] = success
    if not success:
         # –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –¥—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
         # raise HTTPException(status_code=400, detail=message)
         # –ê–±–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω –≥—Ä–∏
         pass
    return response

@router.post("/move")
async def move_creature_api(request_data: MoveRequest):
    success, message = game.move_creature(
        request_data.creatureId,
        request_data.targetX,
        request_data.targetY
    )
    response = game.get_state()
    response['actionSuccess'] = success
    if not success:
        # raise HTTPException(status_code=400, detail=message)
        pass
    return response

@router.post("/attack")
async def attack_creature_api(request_data: AttackRequest):
    success, message = game.attack_creature(
        request_data.attackerId,
        request_data.defenderId
    )
    response = game.get_state()
    response['actionSuccess'] = success
    if not success:
       # raise HTTPException(status_code=400, detail=message)
       pass
    return response

@router.post("/end_turn")
async def end_turn_api():
    success, message = game.end_turn()
    response = game.get_state()
    response['actionSuccess'] = success
    if not success:
        # raise HTTPException(status_code=400, detail=message)
        pass
    return response

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è) ---
# –ó–∞–ø—É—Å–∫–∞—Ç–∏ —á–µ—Ä–µ–∑: uvicorn main:app --reload --port 5000
# (–¥–µ main - —ñ–º'—è –≤–∞—à–æ–≥–æ python —Ñ–∞–π–ª—É)
# if __name__ == "__main__":
#     import uvicorn
#     # –ó–∞–ø—É—Å–∫ Uvicorn –ø—Ä–æ–≥—Ä–∞–º–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —Ä—è–¥–∫—É)
#     # –ó–∞–∑–≤–∏—á–∞–π –∫—Ä–∞—â–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
#     uvicorn.run(router, host="127.0.0.1", port=5000)

